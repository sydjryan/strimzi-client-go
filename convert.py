#!/usr/bin/env python

import sys
import re


### This script is used to convert `type MyTypeName map[string]interface{}` to `type MyTypeName map[string]string` in the Strimzi Go client code.

interface_pattern = re.compile(r"type\s+\w+\s+map\[string\]interface\{\}")

filename = sys.argv[1] # e.g. Kafka.go
package_name = sys.argv[2] # e.g. v1beta2

type_name = sys.argv[1].split("/")[-1].split(".")[0] # e.g. Kafka

with open(sys.argv[1], "r") as f:
    lines = f.readlines()
    count = 0

    for i, line in enumerate(lines):
        if interface_pattern.search(line) is not None:
            lines[i] = str.replace(line, "interface{}", "string")
            count += 1
    
    print(f"Done! Replaced {count} occurrences of `type MyTypeName map[string]interface{{}}` with `type MyTypeName map[string]string`")

with open(sys.argv[1], "w") as f:
    f.writelines(lines)

### Now, change the top of the files from: 
# ```
# // Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

# package tmp

# import "encoding/json"
# import "fmt"
# import "reflect"
# import "regexp"

# // +kubebuilder:object:root=true
# // +kubebuilder:subresource:status
# type Kafka struct {
# 	// APIVersion defines the versioned schema of this representation of an object.
# 	// Servers should convert recognized schemas to the latest internal value, and may
# 	// reject unrecognized values. More info:
# 	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
# 	ApiVersion *string `json:"apiVersion,omitempty" yaml:"apiVersion,omitempty" mapstructure:"apiVersion,omitempty"`

# 	// Kind is a string value representing the REST resource this object represents.
# 	// Servers may infer this from the endpoint the client submits requests to. Cannot
# 	// be updated. In CamelCase. More info:
# 	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
# 	Kind *string `json:"kind,omitempty" yaml:"kind,omitempty" mapstructure:"kind,omitempty"`

# 	// Metadata corresponds to the JSON schema field "metadata".
# 	Metadata KafkaBridgeMetadata `json:"metadata,omitempty" yaml:"metadata,omitempty" mapstructure:"metadata,omitempty"`
# ```

# TO:
# ```
# // Partially generated by github.com/atombender/go-jsonschema, edited per github.com/RedHatInsights/strimzi-client-go.

# package tmp

# import (
# 	"encoding/json"
#     "fmt"
#     "reflect"
#     "regexp"
#     metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
# )

# // +kubebuilder:object:root=true
# // +kubebuilder:subresource:status
# type Kafka struct {
# 	metav1.TypeMeta   `json:",inline"`
# 	metav1.ObjectMeta `json:"metadata,omitempty"`
# ```

replace_text = f"""
// Partially generated by github.com/atombender/go-jsonschema, edited per github.com/RedHatInsights/strimzi-client-go.

package {package_name}

import (
	"encoding/json"
    "fmt"
    "reflect"
    "regexp"
    metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type {type_name} struct \u007b
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
"""

target_line = f"""Metadata {type_name}Metadata `json:"metadata,omitempty" yaml:"metadata,omitempty" mapstructure:"metadata,omitempty"`"""

with open(sys.argv[1], "r") as f:
    lines = f.readlines()
    lines_out = []
    final_line = -1

    print("Looking for target line: ", target_line)
    for i, line in enumerate(lines):
        # print(line)
        if target_line in line:
            lines_out.append(replace_text)
            final_line = i
            break

    lines_out.extend(lines[final_line+1:])
    
    print(f"Done! Replaced the top of the file with the new text.")

with open(sys.argv[1], "w") as f:
    f.writelines(lines_out)


# Now we need to add [type_name]List:

target_line = f"""Status *{type_name}Status `json:"status,omitempty" yaml:"status,omitempty" mapstructure:"status,omitempty"`"""
add_text = f"""
// +kubebuilder:object:root=true
// {type_name}List contains a list of instances.
type {type_name}List struct \u007b
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`

	// A list of {type_name} objects.
	Items []{type_name} `json:"items,omitempty"`
\u007d
"""

with open(sys.argv[1], "r") as f:
    lines = f.readlines()
    lines_out = []
    add_text_now = False

    print("Looking for target line: ", target_line)
    for i, line in enumerate(lines):
        # print(line)
        lines_out.append(line)
        if add_text_now:
            print("Countdown is 0! Adding text")
            lines_out.append(add_text)
            add_text_now = False
        if target_line in line:
            print("Found target line!")
            add_text_now = True
    
    print(f"Done! Added List definition.")

with open(sys.argv[1], "w") as f:
    f.writelines(lines_out)
